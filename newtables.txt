create table if not exists users
(
userID int(10) primary key auto_increment,
username varchar(20) not null unique,
pass varchar(100)not null,
type enum('teacher', 'student', 'secretary') not null
);

create table if not exists teacher
(
id int(10) primary key auto_increment,
t_fname varchar(15) not null,
t_lname varchar(20) not null, 
email varchar(50) not null unique,
topic varchar(100),
homephone int(10),
cellphone int(10),
department varchar(100),
university  varchar(100),
username varchar(20) not null,
foreign key(username)
references users (username)
);


create table if not exists thesis
(
thesisID int(10) primary key auto_increment,
supervisor int(10) not null,
title varchar(50) not null,
th_description varchar(500),
pdf_description longblob,
assigned boolean default 0,
finalized boolean default 0, 
th_status enum ('NOT_ASSIGNED','ASSIGNED','ACTIVE','EXAM','DONE','CANCELLED'),
foreign key (supervisor)
references teacher (id) on delete cascade,
gs_numb int(10),
grading boolean default 0
);

create table if not exists student
(
id int(10) primary key auto_increment,
s_fname varchar(15) not null,
s_lname varchar(20) not null,
studentID int(10) not null unique,
street varchar(50),
street_number int(10),
city varchar(20),
postcode int(5),
father_name varchar(15),
homephone varchar(10),
cellphone varchar(10) unique,
email varchar(50) unique,
thesisID int(10),
username varchar(20) not null unique,
foreign key(username)
references users (username),
foreign key (thesisID)
references thesis (thesisID) on delete set null
);


create table if not exists secretary
(
secretaryID int(10) primary key,
secr_fname varchar(15) not null,
secr_lname varchar(20) not null,
username varchar(20) not null unique,
foreign key(username)
references users (username)
);


create table if not exists committee
(
thesisID int (10) primary key,
supervisor int(10) not null,
member1 int(10),
member2 int(10),
m1_confirmation boolean,
m2_confirmation boolean,
foreign key (thesisID)
references thesis (thesisID) on delete cascade,
foreign key (supervisor)
references thesis (supervisor),
foreign key (member1)
references teacher (id),
foreign key (member2)
references teacher (id)
);


create table if not exists announcements
(
announcementID int(10) primary key auto_increment,
announcementTitle varchar(50),
announcementDate date,
announcementDesc varchar(500)
);


 create table if not exists committeeInvitations
 (
 invitationID int primary key auto_increment,
 senderID int(10) not null,
 receiverID int(10) not null,
 invitationDate date not null,
 response boolean,
 responseDate date,
 foreign key (senderID)
 references student (studentID),
 foreign key (receiverID)
 references teacher (id)
 );

 create table if not exists thesisStatusChanges
 (
 id int primary key auto_increment,
 thesisID int(10) not null,
 changeDate date,
 changeTo enum('NOT_ASSIGNED','ASSIGNED','ACTIVE','EXAM','DONE','CANCELLED'),
 foreign key (thesisID)
 references thesis (thesisID)
 );

create table if not exists teacherNotes
(
id int primary key auto_increment,
thesisID int(10) not null,
teacherID int(10) not null,
description varchar(300),
foreign key (thesisID)
references thesis (thesisID),
foreign key (teacherID)
references teacher (id)
);

create table if not exists cancelledThesis
(
id int primary key auto_increment,
thesisID int(10) not null,
gaNumber int not null,
gaDate date not null,
reason varchar(100) default ('από Διδάσκοντα'),
foreign key (thesisID)
references thesis (thesisID)
);

create table if not exists grades
(
id int primary key auto_increment,
thesisID int(10) not null,
teacherID int(10) not null,
quality_grade int(10),
time_grade int(10),
rest_quality_grade int(10),
presentation_grade int(10),
calc_grade int(10),
foreign key (thesisID)
references thesis (thesisID),
foreign key (teacherID)
references teacher (id)
);

CREATE TABLE IF NOT EXISTS thesis_exam_meta (
  thesisID INT(10) PRIMARY KEY,
  draft_file VARCHAR(255) NULL,
  external_links JSON NULL,
  exam_datetime DATETIME NULL,
  exam_room VARCHAR(120) NULL,
  exam_meeting_url VARCHAR(255) NULL,
  report_url VARCHAR(255) NULL,
  repository_url VARCHAR(255) NULL,
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT fk_tem_thesis FOREIGN KEY (thesisID) REFERENCES thesis(thesisID) ON DELETE CASCADE
);
